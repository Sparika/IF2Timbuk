  section typeSymbols:
  
    state, fact, set, protocol_id, nat, bool
    agent, text, symmetric_key, public_key, hash_func,
    message, pairT
  
  section signature:
  
	 message > state
     message > bool
     message > agent
     message > protocol_id        
     message > text         
     message > symmetric_key 
     message > public_key    
     message > hash_func
     message > nat
     message > pairT
  
    % failure: failure(X,Y)
    failure     : bool * message -> message
    % check_intruder: check_i(X)
    check_i		: message -> state
    % check_equality: check_eq(X,Y)
    check_eq		: message * message -> bool
    % conjunction: and(X,Y)
    and		: bool * bool -> bool
    % union: u(X,Y)
    u		: message * message -> message
    % list: l(X,Y)
    l		: message * message -> message
    
    null1 : message -> message
    null2 : message * message -> message
    null3 : message * message * message -> message
    null4 : message * message * message * message -> message
    
        % concatenation: pair(Msg1,Msg2)
    pair     : message * message -> pairT
    % asymmetric encryption: crypt(Key,Message)
    crypt    : message * message -> message
    % inverse of a public key (=private key): inv(Key)
    inv      : message -> message
    % symmetric encryption: scrypt(Key,Message)
    scrypt   : message * message -> message
    % exponentiation: exp(Base,Exponent)
    exp      : message * message -> message
    % exclusive or: xor(N1,N2)
    xor      : message * message -> message
    % application of a hash function: apply(F,Arg)
    apply    : message * message -> message
       
    % set element: contains(a,set_1)
    contains : message * set -> fact
    % secrecy: secret(Msg,id,AgentSet)
    secret   : message * protocol_id * sate -> fact
    % intruder knowledge: iknows(ki)
    iknows   : message -> fact
    
    % witness for authentication: witness(A,B,id,Msg)
    witness  : agent * agent * protocol_id * message  -> fact
    % request for strong authentication: request(B,A,id,Msg,RoleID)
    request  : agent * agent * protocol_id * message * nat -> fact
    % request for weak authentication: wrequest(B,A,id,Msg,RoleID)
    wrequest : agent * agent * protocol_id * message * nat -> fact
    

  section types:
  
    % declaration of the pre-defined constants:
    true, false: bool
    safe, unsafe: state
    null,nulli,null0,end: message
    a, b, i :agent
    
    % declaration of the variables used in this file:
    PreludeK,PreludeM,PreludeM1,PreludeM2,PreludeM3: message
    X,Y,Z,R: message

    State: state
    %Fact: fact
    SetVar: set
    Protocol_id: protocol_id
    Nat: nat
    Bool: bool
    Agent: agent
    Text: text
    Symmetric_key: symmetric_key
    Public_key: public_key
    Hash_func: hash_func
    Message: message
    Pair: pairT
    
  section equations:

    % associativity of concatenation:
    pair(PreludeM1,pair(PreludeM2,PreludeM3))
      = pair(pair(PreludeM1,PreludeM2),PreludeM3)
  
    % identity of double inverse:
    %inv(inv(PreludeK)) = PreludeK

    % commutation of exponents:
    %exp(exp(PreludeM1,PreludeM2),PreludeM3) = exp(exp(PreludeM1,PreludeM3),PreludeM2)
    % cancellation of inverse exponents:
    %exp(exp(PreludeM1,PreludeM2),inv(PreludeM2)) = PreludeM1
  
    % associativity of xor:
    %xor(PreludeM1,xor(PreludeM2,PreludeM3)) = xor(xor(PreludeM1,PreludeM2),PreludeM3)
    % commutativity of xor:
    %xor(PreludeM1,PreludeM2) = xor(PreludeM2,PreludeM1)
    % nilpotency of xor:
    %xor(xor(PreludeM1,PreludeM1),PreludeM2) = PreludeM2
  
  section intruder:  % for the Dolev-Yao model
  
    % generating rules:
    %step gen_pair (PreludeM1,PreludeM2) :=
    %    iknows(PreludeM1).iknows(PreludeM2) => iknows(pair(PreludeM1,PreludeM2))
    % generating pair of only one element
    %step gen_state_pair (State) :=
    %    iknows(State) => iknows(pair(State,nulli))
    %step gen_fact_pair (Fact) :=  
    %    iknows(Fact) => iknows(pair(Fact,nulli))
    %step gen_set_pair (SetVar) :=  
    %    iknows(SetVar) => iknows(pair(SetVar,nulli))
    %step gen_protocol_id_pair (Protocol_id) :=  
    %    iknows(Protocol_id) => iknows(pair(Protocol_id,nulli))
    %step gen_nat_pair (Nat) :=  
    %    iknows(Nat) => iknows(pair(Nat,nulli))
    %step gen_bool_pair (Bool) :=  
    %    iknows(Bool) => iknows(pair(Bool,nulli))
    %step gen_agent_pair (Agent) :=  
    %    iknows(Agent) => iknows(pair(Agent,nulli))
    %step gen_text_pair (Text) :=  
    %    iknows(Text) => iknows(pair(Text,nulli))
    %step gen_public_key_pair (Public_key) :=  
    %    iknows(Public_key) => iknows(pair(Public_key,nulli))
    %step gen_symmetric_key_pair (Symmetric_key) :=  
    %    iknows(Symmetric_key) => iknows(pair(Symmetric_key,nulli))  

    % generating pair of two or more elements
    %step gen_state_pair_pair (State) :=
    %    iknows(Pair).iknows(State) => iknows(pair(State,Pair))
    %step gen_fact_pair_pair (Fact) :=  
    %    iknows(Pair).iknows(Fact) => iknows(pair(Fact,Pair))
    %step gen_set_pair_pair (SetVar) :=  
    %    iknows(Pair).iknows(SetVar) => iknows(pair(SetVar,Pair))
    %step gen_protocol_id_pair_pair (Protocol_id) :=  
    %    iknows(Pair).iknows(Protocol_id) => iknows(pair(Protocol_id,Pair))
    %step gen_nat_pair_pair (Nat) :=  
    %    iknows(Pair).iknows(Nat) => iknows(pair(Nat,Pair))
    %step gen_bool_pair_pair (Bool) :=  
    %    iknows(Pair).iknows(Bool) => iknows(pair(Bool,Pair))
    %step gen_agent_pair_pair (Agent) :=  
    %    iknows(Pair).iknows(Agent) => iknows(pair(Agent,Pair))
    %step gen_text_pair_pair (Text) :=  
    %    iknows(Pair).iknows(Text) => iknows(pair(Text,Pair))
    %step gen_public_key_pair_pair (Public_key) :=  
    %    iknows(Pair).iknows(Public_key) => iknows(pair(Public_key,Pair))
    %step gen_symmetric_key_pair_pair (Symmetric_key) :=  
    %    iknows(Pair).iknows(Symmetric_key) => iknows(pair(Symmetric_key,Pair)) 



    step gen_crypt (PreludeM1,PreludeM2) :=
      iknows(PreludeM1).iknows(PreludeM2) => iknows(crypt(PreludeM1,PreludeM2))
    %step gen_scrypt (PreludeM1,PreludeM2) :=
    %  iknows(PreludeM1).iknows(PreludeM2) => iknows(scrypt(PreludeM1,PreludeM2))
    %step gen_exp (PreludeM1,PreludeM2) :=
    %  iknows(PreludeM1).iknows(PreludeM2) => iknows(exp(PreludeM1,PreludeM2))
    %step gen_xor (PreludeM1,PreludeM2) :=
    %  iknows(PreludeM1).iknows(PreludeM2) => iknows(xor(PreludeM1,PreludeM2))
    %step gen_apply (PreludeM1,PreludeM2) :=
    %  iknows(PreludeM1).iknows(PreludeM2) => iknows(apply(PreludeM1,PreludeM2))
  
    % analyzing rules:
    step ana_pair (PreludeM1,PreludeM2) :=
      iknows(pair(PreludeM1,PreludeM2)) => iknows(PreludeM1).iknows(PreludeM2)
    step ana_crypt (PreludeK,PreludeM) :=
      iknows(crypt(PreludeK,PreludeM)).iknows(inv(PreludeK)) => iknows(PreludeM)
    step ana_scrypt (PreludeK,PreludeM) :=
      iknows(scrypt(PreludeK,PreludeM)).iknows(PreludeK) => iknows(PreludeM)
  
    % generating fresh constants of any type:
    %step generate (PreludeM) :=
    % =[exists PreludeM]=> iknows(PreludeM)

  section check:

    step safe () :=
 check_i(null) => safe 
    step unsafe (X) :=
 check_i(l(i,X)) => unsafe
    step check_i (X,Y) :=
 check_i(l(Y,X)) => check_i(X)  
    step and() :=
 and(true,true) => true
 	% check_eq for symbols are automatically generated
 	
 	step union() :=
 u(X,u(Y,Z)) => u(Y,u(X,Z))
  
  section verification:

    step failure (X,Y,Z) :=
 iknows(X).secret(Y,Z,safe) => failure(check_eq(X,Y),Z)
 
 	step failure2 (X,Y,Z) :=
 iknows(X).secret(X,Z,safe) => failure(true,Z)
 
 
 section fail_states:

attack_state secrecy_of_X (X,Y) :=
	u(failure(true,X),Y)
	
	
  section approximations:
  
  u(X,u(Y,Z)) = u(Y,u(X,Z))
  u(X,Y) = Y
  l(X,l(Y,Z)) = l(Y,l(X,Z))

  crypt(X,Y) = X
  pair(X,Y) = Y
  %iknows(X) = iknows(Y)
