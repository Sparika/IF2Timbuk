%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilegZSvgV

section signature:

state_bob: agent * agent * public_key * public_key * nat * symmetric_key * text * text * set(agent) * nat -> fact
state_alice: agent * agent * public_key * public_key * nat * symmetric_key * text * text * set(agent) * nat -> fact


section types:

nb, alice_bob_nb, bob_alice_na, na: protocol_id
Dummy_Text, dummy_text, Information, Dummy_Information, Reponse, Dummy_Reponse: text
set_78, set_77, set_76, set_74, set_70, set_62: set
5, 3, 1, State, 10, 6, 4, SID, 2, Dummy_State, 0, SID2, SID1: nat
13,14,16,110:nat
Set_38, Dummy_Set_38, Set_18, Dummy_Set_18, ASGoal: set(agent)
start, MGoal: message
Ka, Kb, ka, kb, ki: public_key
Sk, sk, Dummy_Sk, dummy_sk: symmetric_key
A, B, A2Goal, A1Goal, i, a, b: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(ka).
 iknows(kb).
 iknows(ki).
 iknows(inv(ki)).
 iknows(i).
 state_alice(a,b,ka,kb,0,dummy_sk,dummy_text,dummy_text,set_62,13).
 state_bob(b,a,ka,kb,1,dummy_sk,dummy_text,dummy_text,set_70,14).
 state_alice(a,i,ka,ki,0,dummy_sk,dummy_text,dummy_text,set_74,16).
 state_bob(b,i,ki,kb,1,dummy_sk,dummy_text,dummy_text,set_78,110)


section rules:

step step_0 (A,B,Ka,Kb,Dummy_Sk,Information,Reponse,Dummy_Set_18,SID,Na) :=
 state_alice(A,B,Ka,Kb,0,Dummy_Sk,Information,Reponse,Dummy_Set_18,SID).
 iknows(start)
=[exists Sk]=>
 state_alice(A,B,Ka,Kb,2,Sk,Information,Reponse,Dummy_Set_18,SID).
 iknows(crypt(Kb,Sk))).
 secret(Sk,na,Dummy_Set_18).
 contains(A,Dummy_Set_18).
 contains(B,Dummy_Set_18)

step step_1 (A,B,Ka,Kb,Sk,Dummy_Text,Reponse,Set_18,SID,Nb) :=
 state_alice(A,B,Ka,Kb,2,Sk,Dummy_Text,Reponse,Set_18,SID).
 iknows(crypt(Kb,Sk)
 =[exists Information]=>
 state_alice(A,B,Ka,Kb,4,Sk,Information,Reponse,Set_18,SID).
 iknows(scrypt(Sk,Information)).
 secret(Information,na,Set_18).
 contains(A,Set_18).
 contains(B,Set_18)

step step_2 (B,A,Ka,Kb,Dummy_Sk,Information,Reponse,Dummy_Set_38,SID,Na,Nb) :=
 state_bob(B,A,Ka,Kb,1,Dummy_Sk,Information,Reponse,Dummy_Set_38,SID).
 iknows(crypt(Kb,Sk))
 =>
 state_bob(B,A,Ka,Kb,3,Sk,Information,Reponse,Dummy_Set_38,SID)

step step_3 (B,A,Ka,Kb,Sk,Dummy_Information,Dummy_Reponse,Dummy_Set_38,SID,Na,Nb) :=
 state_bob(B,A,Ka,Kb,1,Sk,Dummy_Information,Dummy_Reponse,Dummy_Set_38,SID).
 iknows(scrypt(Sk,Information))
 =[exists Reponse]=>
 state_bob(B,A,Ka,Kb,3,Sk,Information,Reponse,Dummy_Set_38,SID).
 iknows(scrypt(Sk,Reponse)
 secret(Reponse,na,Set_38).
 contains(A,Set_38).
 contains(B,Set_38)

step step_4 (B,A,Ka,Kb,Na,Nb,Set_38,SID) :=
 state_alice(B,A,Ka,Kb,3,Sk,Information,Dummy_Reponse,Set_38,SID).
 iknows(scrypt(Sk,Reponse))
 =>
 state_alice(B,A,Ka,Kb,5,Sk,Information,Reponse,Set_38,SID)


section properties:

property secrecy_of_na (MGoal,ASGoal) :=
 [] ((secret(MGoal,na,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_nb (MGoal,ASGoal) :=
 [] ((secret(MGoal,nb,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_alice_bob_nb (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,alice_bob_nb,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,alice_bob_nb,MGoal))
     /\ ((request(A1Goal,A2Goal,alice_bob_nb,MGoal,SID1)
           /\ request(A1Goal,A2Goal,alice_bob_nb,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_bob_alice_na (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,bob_alice_na,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,bob_alice_na,MGoal))
     /\ ((request(A1Goal,A2Goal,bob_alice_na,MGoal,SID1)
           /\ request(A1Goal,A2Goal,bob_alice_na,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_na (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,na,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_nb (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,nb,ASGoal) &
 not(contains(i,ASGoal))
