  section typeSymbols:
  
    state, fact, set, protocol_id, nat, bool
    agent, text, symmetric_key, public_key, hash_func,
    message, pairT, union, nonce
    
  section primitiveTypes:
  	nat,agent
  
  section signature:
  
	 message > state
     message > bool
     message > agent
     message > protocol_id        
     message > text         
     message > symmetric_key 
     message > public_key    
     message > hash_func
     message > nat
     message > pairT
     message > nonce
  
    % failure: failure(X,Y)
    failure     : bool * message -> message
    % check_intruder: check_i(X)
    check_i		: message -> state
    % check_equality: check_eq(X,Y)
    check_eq		: message * message -> bool
    % conjunction: and(X,Y)
    and		: bool * bool -> bool
    % union: u(X,Y)  Real is fact message to message
    u		: message * union -> union
    % list: l(X,Y)
    l		: message * message -> message
    pid		: nat * text * text -> nat
    cid		: nat * text * text -> nat
    % nonce: nonce(X,Y)
    n	: message * message -> nonce
    
    null1 : message -> message
    null2 : message * message -> message
    null3 : message * message * message -> message
    null4 : message * message * message * message -> message
    
        % concatenation: pair(Msg1,Msg2)
    pair     : message * message -> pairT
    % asymmetric encryption: crypt(Key,Message)
    crypt    : message * message * nat -> message
    % inverse of a public key (=private key): inv(Key)
    inv      : message -> message
    % symmetric encryption: scrypt(Key,Message)
    scrypt   : message * message * nat -> message
    % exponentiation: exp(Base,Exponent)
    exp      : message * message -> message
    % exclusive or: xor(N1,N2)
    xor      : message * message -> message
    % application of a hash function: apply(F,Arg)
    apply    : message * message -> message
       
    % set element: contains(a,set_1)
    contains : message * set -> fact
    % secrecy: secret(Msg,id,AgentSet)
    secret   : message * protocol_id * state -> fact
    % intruder knowledge: iknows(ki)
    iknows   : message -> fact
    
    % witness for authentication: witness(A,B,id,Msg)
    witness  : agent * agent * protocol_id * message  -> fact
    % request for strong authentication: request(B,A,id,Msg,RoleID)
    request  : agent * agent * protocol_id * message * nat -> fact
    % request for weak authentication: wrequest(B,A,id,Msg,RoleID)
    wrequest : agent * agent * protocol_id * message * nat -> fact
    

  section types:
  
    % declaration of the pre-defined constants:
    true, false: bool
    safe, unsafe: state
    null,null0,end: message
    nulli: nat
    pnulli,cnulli,scnulli: nat
    a, b, i: agent
    lin: fact
    
    % declaration of the variables used in this file:
    PreludeK,PreludeM,PreludeM1,PreludeM2,PreludeM3: message
    PreludeSK: symmetric_key
    X,Y,Z,R,W: message
    U: union
    F1, F2, F3 : fact
    P1, P2: pairT
    PID, CID: nat
    A: agent
    

    State: state
    %Fact: fact
    SetVar: set
    Protocol_id: protocol_id
    Nat: nat
    Bool: bool
    Agent: agent
    Text: text
    Symmetric_key: symmetric_key
    Public_key: public_key
    Hash_func: hash_func
    Message: message
    Pair: pairT
    
  section equations:

    % associativity of concatenation:
    %pair(PreludeM1,pair(PreludeM2,PreludeM3))
    %  = pair(pair(PreludeM1,PreludeM2),PreludeM3)
  
    % identity of double inverse:
    %inv(inv(PreludeK)) = PreludeK

    % commutation of exponents:
    %exp(exp(PreludeM1,PreludeM2),PreludeM3) = exp(exp(PreludeM1,PreludeM3),PreludeM2)
    % cancellation of inverse exponents:
    %exp(exp(PreludeM1,PreludeM2),inv(PreludeM2)) = PreludeM1
  
    % associativity of xor:
    %xor(PreludeM1,xor(PreludeM2,PreludeM3)) = xor(xor(PreludeM1,PreludeM2),PreludeM3)
    % commutativity of xor:
    %xor(PreludeM1,PreludeM2) = xor(PreludeM2,PreludeM1)
    % nilpotency of xor:
    %xor(xor(PreludeM1,PreludeM1),PreludeM2) = PreludeM2
  
  section intruder:  % for the Dolev-Yao model
  
    % generating rules:
    step gen_pair (PreludeM1,PreludeM2) :=
        iknows(PreludeM1).iknows(PreludeM2) => iknows(pair(PreludeM1,PreludeM2))
        
    %step clear_pair1 (X,Y,Z) :=
    %	pair(pair(X,Y),Z) => pair(X,pair(Y,Z))
    	
    %step clear_pair_nulli (X) :=
    %	pair(nulli,X) => X
    	
    %step clear_pair_pid (X,Y,Z,W) :=
    %	pair(pid(Y,Z,W),X) => X

    step gen_crypt (PreludeM1,PreludeM2) :=
      iknows(PreludeM1).iknows(PreludeM2) => iknows(crypt(PreludeM1,PreludeM2))
    step gen_scrypt (PreludeM1,PreludeM2) :=
      iknows(PreludeM1).iknows(PreludeM2) => iknows(scrypt(PreludeM1,PreludeM2))
    %step gen_exp (PreludeM1,PreludeM2) :=
    %  iknows(PreludeM1).iknows(PreludeM2) => iknows(exp(PreludeM1,PreludeM2))
    %step gen_xor (PreludeM1,PreludeM2) :=
    %  iknows(PreludeM1).iknows(PreludeM2) => iknows(xor(PreludeM1,PreludeM2))
    %step gen_apply (PreludeM1,PreludeM2) :=
    %  iknows(PreludeM1).iknows(PreludeM2) => iknows(apply(PreludeM1,PreludeM2))
  
  	step gen_skey (PreludeSK) :=
  		iknows(PreludeM) =[exists PreludeSK]=> iknows(PreludeSK)
  		
  
  
    % analyzing rules:
    step ana_pair (PreludeM1,PreludeM2) :=
      iknows(pair(PreludeM1,PreludeM2)) => iknows(PreludeM1).iknows(PreludeM2)
    step ana_crypt (PreludeK,PreludeM) :=
      iknows(crypt(PreludeK,PreludeM)).iknows(inv(PreludeK)) => iknows(PreludeM)
    %step ana_scrypt (PreludeK,PreludeM) :=
    %  iknows(scrypt(PreludeK,PreludeM)).iknows(PreludeK) => iknows(PreludeM)
    step ana_scryptSymOnly (PreludeSK, PreludeM) :=
    	iknows(scrypt(PreludeSK,PreludeM)).iknows(PreludeSK) => iknows(PreludeM)
  
    % generating fresh constants of any type:
    %step generate (PreludeM) :=
    % =[exists PreludeM]=> iknows(PreludeM)
    
     	step union(F1,F2,U) :=
 	%u(F1,u(F2,U)) => u(F2,u(F1,U))
	iknows(F1).iknows(F2) => iknows(F2).iknows(F1)


  section check:

	step isSafe() :=
  secret(X,Y,Z) => secret(X,Y,check_i(Z))
    step safe () :=
 check_i(end) => safe 
    step check_ia (Y) :=
 check_i(l(a,X)) => check_i(X)  
    step check_ib (Y) :=
 check_i(l(b,X)) => check_i(X)
 
 
    step and() :=
 and(true,true) => true
 	% check_eq for symbols are automatically generated
  
  section verification:

    %step failure (X,Y,Z) :=
 %iknows(X).secret(Y,Z,safe) => failure(check_eq(X,Y),Z)
 
 	step failure (X,Y,Z) :=
 iknows(X).secret(X,Z,safe) => failure(true,Z)
 
 
 section fail_states:

attack_state secrecy_of_X (X,U) :=
	u(failure(true,X),U)
	
	
  section approximations:
  

  l(X,l(Y,Z)) = l(Y,l(X,Z))
  pair(W,pair(X,pair(Y,Z))) = pair(X,pair(Y,Z))
  crypt(X,Y,CID) = CID
  scrypt(X,Y,CID) = CID
  pair(X,P1) = P1
  pair(X,PID) = PID
  iknows(X) = iknows(Y)
